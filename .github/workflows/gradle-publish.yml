name: IITP

on:
  push:
    tags: ["*"]
  release:
    types: [created]

jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04
    steps:
      # Git clone
      - name: Checkout
        uses: actions/checkout@v2

      # Set environment variable
      - name: Set environment variable
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "REPOSITORY=$(echo $GITHUB_REPOSITORY | tr [:upper:] [:lower:])" >> $GITHUB_ENV

      # Build Front-end
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Change directory to frontend and build front-end codes using NPM
        run: |
          cd frontend
          npm i
          mv font-awesome-pro-icons/* node_modules/@fortawesome/free-solid-svg-icons
          npm run build

      # Build Back-end
      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          java-package: jdk
      - name: Grant execute permission for gradlew and build back-end codes using Gradle
        run: |
          echo "${{ secrets.DATASOURCE }}" > src/main/resources/datasource.yml
          chmod +x gradlew
          ./gradlew bootWar

      # Build and push Docker image
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACCESS_TOKEN }}
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.REPOSITORY }}:release-${{ env.RELEASE_VERSION }}

      # SSH
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_IITP_HOST }}
          port: ${{ secrets.REMOTE_IITP_SSH_PORT }}
          username: ${{ secrets.REMOTE_IITP_SSH_USERNAME }}
          password: ${{ secrets.REMOTE_IITP_SSH_PASSWORD }}
          script: |
            CONTAINER_NAME=iitp-prd
            TAG=release

            REDEPLOY_LIST=(1 2 3)
            REDEPLOY_NUM=`expr $(($RANDOM% 3)) + 1`

            for IDX in ${REDEPLOY_LIST[@]/$REDEPLOY_NUM}; do
              if [ `docker ps | grep -c $CONTAINER_NAME-$IDX` != 0 ]; then
                docker stop $CONTAINER_NAME-$IDX
              fi
              if [ `docker ps -a | grep -c $CONTAINER_NAME-$IDX` != 0 ]; then
                docker rm $CONTAINER_NAME-$IDX
              fi
              if [ `docker network inspect iitp-net | grep -c $CONTAINER_NAME-$IDX` != 0 ]; then
                docker network disconnect iitp-net $CONTAINER_NAME-$IDX
              fi
            done

            NEW_VERSION_IMAGE=ghcr.io/${{ env.REPOSITORY }}:$TAG-${{ env.RELEASE_VERSION }}

            docker pull $NEW_VERSION_IMAGE
            for IDX in ${REDEPLOY_LIST[@]/$REDEPLOY_NUM}; do
              docker run -d --name $CONTAINER_NAME-$IDX --expose `expr 9200 + $IDX` -e PORT=`expr 9200 + $IDX` $NEW_VERSION_IMAGE
              docker network connect iitp-net $CONTAINER_NAME-$IDX
            done

            sleep 30s

            docker stop $CONTAINER_NAME-$REDEPLOY_NUM
            docker rm $CONTAINER_NAME-$REDEPLOY_NUM
            docker network disconnect iitp-net $CONTAINER_NAME-$REDEPLOY_NUM
            if [ `docker images | grep ghcr.io/${{ env.REPOSITORY }} | grep -v $TAG-${{ env.RELEASE_VERSION }} | grep -c ''` != 0 ]; then
              docker rmi $(docker images -q --filter "dangling=true") $(docker images | grep ghcr.io/${{ env.REPOSITORY }} | grep $TAG | grep -v ${{ env.RELEASE_VERSION }} | awk '{print $3}')
            fi
            docker pull ghcr.io/${{ env.REPOSITORY }}:$TAG-${{ env.RELEASE_VERSION }}
            docker run -d --name $CONTAINER_NAME-$REDEPLOY_NUM --expose `expr 9200 + $REDEPLOY_NUM` -e PORT=`expr 9200 + $REDEPLOY_NUM` $NEW_VERSION_IMAGE
            docker network connect iitp-net $CONTAINER_NAME-$REDEPLOY_NUM
